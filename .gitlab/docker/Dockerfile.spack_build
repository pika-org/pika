ARG BASE_IMAGE
FROM $BASE_IMAGE

# Provided by the gitlab runner of .container-builder
ARG NUM_PROCS

ARG SOURCE_DIR
ARG BUILD_DIR

ARG BUILD_TYPE
ARG CMAKE_COMMON_FLAGS
ARG CMAKE_FLAGS

COPY . ${SOURCE_DIR}

# Print spack spec since not printed if the compiler image is found on jfrog
RUN spack -e pika_ci spec -lI

# Configure & Build
# Make sure clang-tidy etc. binaries are in PATH when using clang.
ARG COMPILER
RUN spack -e pika_ci config add "config:flags:keep_werror:all" && \
    if [[ $COMPILER =~ clang ]]; then \
        export PATH="$(spack location --install-dir llvm)/bin:$PATH"; \
    fi && \
    spack -e pika_ci build-env $spack_spec -- \
    bash -c " \
    cmake -B${BUILD_DIR} ${SOURCE_DIR} -DCMAKE_BUILD_TYPE=$BUILD_TYPE $CMAKE_COMMON_FLAGS $CMAKE_FLAGS && \
    cmake --build ${BUILD_DIR} --parallel $NUM_PROCS --target all tests examples install"

# Run compile only tests and tests.unit.build, submit ctest metrics to elastic
ARG SPACK_ARCH
ARG BUILD_TYPE
ARG CI_COMMIT_AUTHOR
ARG CI_COMMIT_BRANCH
ARG CI_COMMIT_DESCRIPTION
ARG CI_COMMIT_MESSAGE
ARG CI_COMMIT_SHA
ARG CI_COMMIT_SHORT_SHA
ARG CI_COMMIT_TIMESTAMP
ARG CI_COMMIT_TITLE
ARG CSCS_LOGSTASH_URL
ARG SPACK_COMMIT
ARG SPACK_SPEC
RUN CTEST_XML=$PWD/ctest.xml; \
    trap \
        "${SOURCE_DIR}/.gitlab/scripts/collect_ctest_metrics.sh ${CTEST_XML}; \
         ${SOURCE_DIR}/.gitlab/scripts/collect_file_sizes.sh ${BUILD_DIR}" \
        EXIT; \
    if [[ $COMPILER =~ clang ]]; then \
        export PATH="$(spack location --install-dir llvm)/bin:$PATH"; \
    fi && \
    spack -e pika_ci build-env $spack_spec -- \
        bash -c "ctest \
            --output-junit ${CTEST_XML} \
            --label-regex COMPILE_ONLY \
            --test-dir ${BUILD_DIR} \
            -j${NUM_PROCS} \
            --timeout 60 \
            --output-on-failure \
            --no-compress-output \
            -R tests \
            --no-tests=error"
