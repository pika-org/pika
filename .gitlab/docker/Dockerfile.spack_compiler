ARG BASE_IMAGE
FROM $BASE_IMAGE

SHELL ["/bin/bash", "-c"]

# Disable host compatibility to be able to compile for other architectures than the one from the
# CSCS CI's .container-builder
# Allow installing deprecated packages (needed for apex)
# Use curl as the fetch method to try to avoid fetch errors. Additionally retry more on failures.
RUN spack config --scope site add concretizer:targets:host_compatible:false && \
    spack config --scope site add config:deprecated:true && \
    spack config --scope site add config:url_fetch_method:curl && \
    spack config --scope site add config:connect_timeout:10 && \
    echo "retry = 10" >> $HOME/.curlrc && \
    echo "retry-connrefused" >> $HOME/.curlrc && \
    echo "retry-max-time = 30" >> $HOME/.curlrc

# Provided by the gitlab runner of .container-builder
ARG NUM_PROCS

# Install compiler if not already installed, modify packages.yaml to require spack compilers
#
# On aarch64 we patch math-vector.h from glibc to avoid compilation errors with nvcc. CUDA 12.6
# seems to fix the issue without requiring patches, but older versions may still need the patch.
# CUDA 12.0 is at least known broken. References:
# - https://bugs.launchpad.net/ubuntu/+source/mumax3/+bug/2032624
# - https://sourceware.org/bugzilla/show_bug.cgi?id=30909
# - https://github.com/NixOS/nixpkgs/pull/264599 (source of patch, with additional guards for NVHPC
#   added (__NVCOMPILER))
# - https://patchwork.sourceware.org/project/glibc/patch/20230927141839.57421-1-simon.chopin@canonical.com/
# - https://github.com/bminor/glibc/commit/cd94326a1326c4e3f1ee7a8d0a161cc0bdcaf07e and
#   https://github.com/bminor/glibc/commit/cd94326a1326c4e3f1ee7a8d0a161cc0bdcaf07e (incompatibility
#   introduced in glibc 2.38, available in Ubuntu 24.04)
ARG SPACK_ARCH
ARG BASE_COMPILER
ARG COMPILER
ARG NVHPC_COMPILER
COPY .gitlab/docker/*.patch /tmp/
RUN echo "spack arch: $(spack arch)"; \
    set -ex; \
    if [[ "$(uname -m)" == "aarch64" ]]; then \
        patch \
            --input /tmp/aarch64-math-vector.patch \
            /usr/include/aarch64-linux-gnu/bits/math-vector.h; \
        patch \
            --input /tmp/aarch64-math.patch \
            /usr/include/math.h; \
    fi; \
    compiler_missing=0; \
    spack compiler info $COMPILER > /dev/null 2> /dev/null || compiler_missing=1; \
    export spack_compiler=${COMPILER/clang/llvm}; \
    if [[ $spack_compiler =~ llvm ]]; then \
        export spack_compiler="$spack_compiler~gold"; \
    fi; \
    if [[ ! -z "$BASE_COMPILER" ]]; then \
        if [[ ! $BASE_COMPILER =~ gcc ]]; then \
            echo "Base compiler must be gcc"; \
            exit 1; \
        fi; \
        base_compiler_missing=0; \
        spack compiler info $BASE_COMPILER > /dev/null 2> /dev/null || base_compiler_missing=1; \
        if [[ $base_compiler_missing != 0 ]]; then \
            spack install -j$NUM_PROCS $BASE_COMPILER arch=$SPACK_ARCH; \
            spack external find \
                --scope site \
                --path $(spack location -i $BASE_COMPILER) gcc; \
        fi; \
        export spack_compiler="$spack_compiler %$BASE_COMPILER"; \
    fi; \
    if [[ $compiler_missing != 0 ]]; then \
        spack install -j$NUM_PROCS $spack_compiler arch=$SPACK_ARCH; \
        spack external find \
            --scope site \
            --path $(spack location -i $spack_compiler) gcc llvm; \
    fi; \
    printf "  all:\n    require:\n    - one_of: [\"%%${COMPILER}\"${NVHPC_COMPILER:+,\"%%}${NVHPC_COMPILER}${NVHPC_COMPILER:+\"}]" \
        >> $SPACK_ROOT/etc/spack/packages.yaml; \
    if [[ ! -z "$NVHPC_COMPILER" ]]; then \
        nvhpc_version=${NVHPC_COMPILER#nvhpc@}; \
        spack install -j$NUM_PROCS $NVHPC_COMPILER%$spack_compiler arch=$SPACK_ARCH; \
        spack external find \
            --scope site \
            --path $(spack location -i $NVHPC_COMPILER)/Linux_$(uname -m)/$nvhpc_version/compilers/bin \
            nvhpc; \
    fi; \
    spack clean --all
