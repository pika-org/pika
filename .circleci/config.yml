#  Copyright (c) 2017-2018 Thomas Heller
#  Copyright (c) 2015 Martin Stumpf
#
#  SPDX-License-Identifier: BSL-1.0
#  Distributed under the Boost Software License, Version 1.0. (See accompanying
#  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

working_dir_default: &working_dir_default
    working_directory: /pika/build

setup_x86_small: &setup_x86_small
    resource_class: small

setup_x86_large: &setup_x86_large
    resource_class: large

setup_arm64_machine: &setup_arm64_machine
    machine:
      image: ubuntu-2004:current
    resource_class: arm.large

docker_default: &docker_default
    docker:
      - image: pikaorg/pika-ci-base:19

defaults: &defaults
    <<: *working_dir_default
    <<: *docker_default

convert_xml: &convert_xml
    name: Converting XML
    when: always
    command: |
        mkdir -p ${CIRCLE_JOB}
        curl \
          https://raw.githubusercontent.com/Kitware/CDash/master/app/cdash/tests/circle/conv.xsl \
          --fail -o $HOME/conv.xsl
        xsltproc \
          $HOME/conv.xsl Testing/`head -n 1 < Testing/TAG`/Test.xml \
          > ${CIRCLE_JOB}/Test.xml


move_core_dump: &move_core_dump
    name: Moving core dumps
    when: on_fail
    command: |
        mkdir -p ${CIRCLE_JOB}
        # Ignore errors if there are no core dumps
        cp core.* ${CIRCLE_JOB} || true

move_debug_log: &move_debug_log
    name: Moving debug logs
    when: on_fail
    command: |
        mkdir -p ${CIRCLE_JOB}
        cp debug-log.txt ${CIRCLE_JOB} || true

core_dependency: &core_dependency
    requires:
      - core

add_github_to_known_hosts: &add_github_to_known_hosts
    run:
        name: Add Github's key(s) to known_hosts
        command: |
            mkdir -p ~/.ssh
            ssh-keyscan -H github.com >>~/.ssh/known_hosts

version: 2

jobs:
  checkout_code:
    <<: *docker_default
    <<: *setup_x86_small
    working_directory: /pika
    steps:
      - checkout:
          path: /pika/source
      - persist_to_workspace:
          root: /pika
          paths:
            - ./source

  # Check circular dependencies with cpp-dependencies tool
  check_circular_deps:
    <<: *working_dir_default
    <<: *docker_default
    <<: *setup_x86_small
    steps:
      - attach_workspace:
          at: /pika
      - run:
          name: Check circular dependencies with cpp-dependencies
          command: |
              # Ignore compatibility headers (the last cut -c3- is to remove a
              # leading ./ in path names)
              cpp-dependencies \
                  --dir /pika/source/libs \
                  --ignore $(find /pika/source/libs -type d -wholename '*/include_compatibility' | cut -d'/' -f5-) \
                  --graph-cycles /tmp/circular_deps.dot
              dot /tmp/circular_deps.dot -Tsvg -o /tmp/circular_deps.svg
              if [[ $(wc -l /tmp/circular_deps.dot | awk '{print $1}') -gt 2 ]]; then exit 1; fi
      - store_artifacts:
          path: /tmp/circular_deps.dot
          destination: /pika/artifacts/circular_deps.dot
      - store_artifacts:
          path: /tmp/circular_deps.svg
          destination: /pika/artifacts/circular_deps.svg

  # Check if the files of the module are listed in the CMakeLists.txt
  # Check if all the module dependencies are listed
  check_module_cmakelists:
    <<: *defaults
    <<: *setup_x86_small
    steps:
      - attach_workspace:
          at: /pika
      - run:
          name: Check if the headers of the modules are listed in their CMakeLists.txt
          command: |
              /pika/source/tools/check_module_cmakelists.sh
              if [[ $(wc -l /tmp/missing_files.txt | awk '{print $1}') -gt 1 ]] \
                  || [[ $(wc -l /tmp/missing_deps.txt | awk '{print $1}') -gt 1 ]]; \
                  then exit 1; fi
      - store_artifacts:
          path: /tmp/missing_files.txt
          destination: /pika/artifacts/missing_files.txt
      - store_artifacts:
          path: /tmp/missing_deps.txt
          destination: /pika/artifacts/missing_deps.txt

  # Ensure that the modules stay clang-formatted
  clang_format:
    <<: *defaults
    <<: *setup_x86_small
    steps:
      - attach_workspace:
          at: /pika
      - run:
          name: Check that C++ files are well clang-formatted
          command: |
              cd /pika/source
              # activate the ** globbing
              shopt -s globstar
              # ignore globs that have no matches (e.g. no cu.in files exist
              # currently)
              shopt -s nullglob
              clang-format --version
              clang-format -i **/*.{cpp,hpp,cu}{,.in}
              git diff --exit-code > /tmp/modified_clang_format_files.txt
      - store_artifacts:
          path: /tmp/modified_clang_format_files.txt
          destination: /pika/artifacts/modified_clang_format_files.txt

  # Ensure that CMake files stay cmake-formatted
  cmake_format:
    <<: *docker_default
    <<: *setup_x86_small
    steps:
      - attach_workspace:
          at: /pika
      - run:
          name: Check that CMake files are well cmake-formatted
          command: |
              cd /pika/source && shopt -s globstar # to activate the ** globbing
              cmake-format --version
              cmake-format -i **/*.cmake **/CMakeLists.txt
              git diff --exit-code > /tmp/modified_cmake_format_files.txt
      - store_artifacts:
          path: /tmp/modified_cmake_format_files.txt
          destination: /pika/artifacts/modified_cmake_format_files.txt

  # Ensure that Python files stay formatted with black
  python_format:
    <<: *docker_default
    <<: *setup_x86_small
    steps:
      - attach_workspace:
          at: /pika
      - run:
          name: Check that Python files are correctly formatted with black
          command: |
              cd /pika/source && shopt -s globstar # to activate the ** globbing
              black --version
              black **/*.py
              git diff --exit-code > /tmp/modified_black_files.txt
      - store_artifacts:
          path: /tmp/modified_black_files.txt
          destination: /pika/artifacts/modified_black_files.txt

  # Ensure that shell scripts stay formatted with shfmt
  shell_format:
    <<: *docker_default
    <<: *setup_x86_small
    steps:
      - attach_workspace:
          at: /pika
      - run:
          name: Check that shell scripts are correctly formatted with shfmt
          command: |
              cd /pika/source && shopt -s globstar # to activate the ** globbing
              shfmt --version
              shfmt -w **/*.sh
              git diff --exit-code > /tmp/modified_black_files.txt
      - store_artifacts:
          path: /tmp/modified_black_files.txt
          destination: /pika/artifacts/modified_black_files.txt

  configure:
    <<: *defaults
    <<: *setup_x86_small
    steps:
      - attach_workspace:
          at: /pika
      - run:
          name: Running CMake
          command: |
            cmake --version
            # Enabling precompiled headers together with stdexec leads to
            # compilation errors with some tests so we explicitly turn them off,
            # see https://github.com/pika-org/pika/issues/514.
            cmake \
                /pika/source \
                -G "Ninja" \
                -DCMAKE_BUILD_TYPE=Debug \
                -DCMAKE_CXX_CLANG_TIDY=clang-tidy \
                -DCMAKE_CXX_FLAGS="-fcolor-diagnostics" \
                -DPIKA_WITH_GIT_COMMIT=${CIRCLE_SHA1} \
                -DPIKA_WITH_GIT_BRANCH="${CIRCLE_BRANCH}" \
                -DPIKA_WITH_GIT_TAG="${CIRCLE_TAG}" \
                -DPIKA_WITH_CXX_STANDARD=20 \
                -DPIKA_WITH_PRECOMPILED_HEADERS=Off \
                -DPIKA_WITH_MALLOC=system \
                -DPIKA_WITH_MPI=ON \
                -DPIKA_WITH_STDEXEC=ON \
                -DPIKA_WITH_EXAMPLES=On \
                -DPIKA_WITH_TESTS=On \
                -DPIKA_WITH_TESTS_HEADERS=On \
                -DPIKA_WITH_PARALLEL_TESTS_BIND_NONE=On \
                -DPIKA_WITH_COMPILER_WARNINGS=On \
                -DPIKA_WITH_COMPILER_WARNINGS_AS_ERRORS=On \
                -DPIKA_WITH_DEPRECATION_WARNINGS=On \
                -DPIKA_WITH_THREAD_LOCAL_STORAGE=On \
                -DPIKA_WITH_STACKTRACES_STATIC_SYMBOLS=On \
                -DPIKA_WITH_STACKTRACES_DEMANGLE_SYMBOLS=Off \
                -DPIKA_WITH_TESTS_DEBUG_LOG=On \
                -DPIKA_WITH_TESTS_DEBUG_LOG_DESTINATION=/pika/build/debug-log.txt \
                -DPIKA_WITH_SPINLOCK_DEADLOCK_DETECTION=On \
                -DPIKA_WITH_CHECK_MODULE_DEPENDENCIES=On
      - persist_to_workspace:
          root: /pika
          paths:
            - ./build

  configure_test_combinations:
    <<: *defaults
    <<: *setup_x86_small
    steps:
      - attach_workspace:
          at: /pika
      - run:
          name: Running CMake with tests on and examples off
          command: |
            cmake \
                /pika/source \
                -G "Ninja" \
                -DPIKA_WITH_MALLOC=system \
                -DPIKA_WITH_TESTS=On \
                -DPIKA_WITH_EXAMPLES=Off
            rm -rf *
      - run:
          name: Running CMake with tests off and examples on
          command: |
            cmake \
                /pika/source \
                -G "Ninja" \
                -DPIKA_WITH_MALLOC=system \
                -DPIKA_WITH_TESTS=Off \
                -DPIKA_WITH_EXAMPLES=On
            rm -rf *

  inshpect:
    <<: *defaults
    <<: *setup_x86_large
    steps:
      - attach_workspace:
          at: /pika
      - run:
          name: Running inshpect
          command: |
              export INSHPECT_NUMTHREADS=4
              export INSHPECT_VERBOSE=1
              inshpect /pika/source /pika/source/.inshpect.toml > \
                  inshpect.txt
              res=$?
              INSHPECT_FD="fd --exclude LICENSE_1_0.txt" \
                  inshpect /pika/source /pika/source/.inshpect-noncpp.toml > \
                  inshpect-noncpp.txt
              res_noncpp=$?
              exit $((res + res_noncpp))
      - store_artifacts:
          path: inshpect.txt
          destination: inshpect.txt
      - store_artifacts:
          path: inshpect-noncpp.txt
          destination: inshpect-noncpp.txt

  spellcheck:
    <<: *defaults
    <<: *setup_x86_small
    steps:
      - attach_workspace:
          at: /pika
      - run:
          name: Running codespell
          command: |
              if [[ -n "$CIRCLE_PULL_REQUEST" ]]; then
                  cd /pika/source
                  codespell --version
                  codespell --ignore-words tools/.codespell_whitelist --skip='*.h5,*.png' $(git diff --name-only origin/main...) > /tmp/spelling_suggestions.txt
                  if [ -s /tmp/spelling_suggestions.txt ]; then exit 1; fi
              else
                  echo "skipping spellcheck on non-PR build"
              fi
          when: always
      - store_artifacts:
          path: /tmp/spelling_suggestions.txt
          destination: /pika/artifacts/spelling_suggestions.txt

  core:
    <<: *defaults
    <<: *setup_x86_large
    steps:
      - attach_workspace:
          at: /pika
      - run:
          name: Building Core
          command: |
              ninja -j4 -k 0 pika
      - persist_to_workspace:
          root: /pika
          paths:
            - ./build

  tests.examples:
    <<: *defaults
    <<: *setup_x86_large
    steps:
      - attach_workspace:
          at: /pika
      - run:
          name: Building Examples
          command: |
              ninja -j4 -k 0 examples
      - run:
          name: Running Example Tests
          when: always
          command: |
              ulimit -c unlimited
              ctest \
                -j4 \
                --timeout 60 \
                -T test \
                --no-compress-output \
                --output-on-failure \
                -R tests.examples
      - run:
          <<: *convert_xml
      - run:
          <<: *move_core_dump
      - run:
          <<: *move_debug_log
      - store_test_results:
          path: tests.examples
      - store_artifacts:
          path: tests.examples
      - persist_to_workspace:
          root: /pika
          paths:
            - ./build

  tests.unit:
    <<: *defaults
    <<: *setup_x86_large
    steps:
      - attach_workspace:
          at: /pika
      - run:
          name: Building Unit Tests
          command: |
              ninja -j4 -k 0 tests.unit
      - run:
          name: Running Unit Tests
          when: always
          command: |
              # We are certain that we want to run mpiexec as root despite
              # warnings as that is the only user available in the container.
              # Mistakes will only affect the current step.
              export OMPI_ALLOW_RUN_AS_ROOT=1
              export OMPI_ALLOW_RUN_AS_ROOT_CONFIRM=1

              ulimit -c unlimited
              ctest \
                -j2 \
                --timeout 120 \
                -T test \
                --no-compress-output \
                --output-on-failure \
                --tests-regex tests.unit \
                --exclude-regex "tests.unit.modules.resource_partitioner.scheduler_binding_check"
      - run:
          <<: *convert_xml
      - run:
          <<: *move_core_dump
      - run:
          <<: *move_debug_log
      - store_test_results:
          path: tests.unit
      - store_artifacts:
          path: tests.unit

  tests.regressions:
    <<: *defaults
    <<: *setup_x86_large
    steps:
      - attach_workspace:
          at: /pika
      - run:
          name: Building Regressions Tests
          command: |
              ninja -j4 -k 0 tests.regressions
      - run:
          name: Running Regressions Tests
          when: always
          command: |
              ctest \
                -j2 \
                --timeout 60 \
                -T test \
                --no-compress-output \
                --output-on-failure \
                -R tests.regressions
      - run:
          <<: *convert_xml
      - run:
          <<: *move_core_dump
      - run:
          <<: *move_debug_log
      - store_test_results:
          path: tests.regressions
      - store_artifacts:
          path: tests.regressions

  tests.headers:
    <<: *defaults
    <<: *setup_x86_large
    steps:
      - attach_workspace:
          at: /pika
      - run:
          name: Building Header Tests
          command: |
              ctest \
                -j4 \
                --timeout 60 \
                -T test \
                --no-compress-output \
                --output-on-failure \
                -R tests.headers
      - run:
          <<: *convert_xml
      - store_test_results:
          path: tests.headers
      - store_artifacts:
          path: tests.headers

  tests.performance:
    <<: *defaults
    <<: *setup_x86_large
    steps:
      - attach_workspace:
          at: /pika
      - run:
          name: Building Performance Tests
          command: |
              ninja -j4 -k 0 tests.performance

  install:
    <<: *docker_default
    <<: *setup_x86_small
    steps:
      - attach_workspace:
          at: /pika
      - run:
          name: Installing
          command: |
              ./bin/hello_world --pika:bind=none
              ninja -j2 install
          working_directory: /pika/build
          when: always
          no_output_timeout: 30m
      - run:
          name: Testing build unit tests
          command: |
              ninja -j2 tests.unit.build
          working_directory: /pika/build
          when: always
      - run:
          name: Testing installed pika
          command: |
              hello_world --pika:bind=none
          working_directory: /pika/build
          when: always

  arm64_build:
    <<: *setup_arm64_machine
    steps:
      - checkout:
          path: pika
      - run:
          name: Setup dependencies Arm64
          command: |
            # Check architecture = arm
            uname -m
            # Install CMake
            wget -q https://cmake.org/files/v3.22/cmake-3.22.6-linux-aarch64.tar.gz \
              -O cmake.tar.gz && echo \
              "79be85d3e76565faacd60695cee11d030f7e7dd8691476144fa25eb93dbd0397  cmake.tar.gz" \
              | sha256sum --check --status && \
              sudo tar --strip-components=1 -C /usr/local -xf cmake.tar.gz && \
              rm cmake.tar.gz
            cmake --version
            # Install pika dependencies
            sudo apt update
            sudo apt install --allow-downgrades \
              --allow-remove-essential --allow-change-held-packages \
              clang \
              ninja-build \
              libboost-context-dev \
              libhwloc-dev \
              mpi-default-dev \
              xsltproc
            git clone --branch 9.1.0 --single-branch --depth 1 \
              https://github.com/fmtlib/fmt.git
            (cd fmt && \
              cmake \
                -GNinja \
                -DBUILD_SHARED_LIBS=ON \
                -DCMAKE_INSTALL_PREFIX=$HOME/project/install/fmt . && \
              ninja install)
            mkdir build
      - run:
          name: Configuring pika Arm64
          command: |
            export CMAKE_PREFIX_PATH=$HOME/project/install/fmt:${CMAKE_PREFIX_PATH}
            cmake \
                ./pika \
                -Bbuild \
                -G "Ninja" \
                -DCMAKE_BUILD_TYPE=Debug \
                -DCMAKE_CXX_COMPILER=clang++ \
                -DCMAKE_CXX_FLAGS="-fcolor-diagnostics" \
                -DPIKA_WITH_GIT_COMMIT=${CIRCLE_SHA1} \
                -DPIKA_WITH_GIT_BRANCH="${CIRCLE_BRANCH}" \
                -DPIKA_WITH_GIT_TAG="${CIRCLE_TAG}" \
                -DPIKA_WITH_CXX_STANDARD=17 \
                -DPIKA_WITH_PRECOMPILED_HEADERS=On \
                -DPIKA_WITH_MALLOC=system \
                -DPIKA_WITH_MPI=ON \
                -DPIKA_WITH_EXAMPLES=On \
                -DPIKA_WITH_TESTS=On \
                -DPIKA_WITH_TESTS_HEADERS=On \
                -DPIKA_WITH_PARALLEL_TESTS_BIND_NONE=On \
                -DPIKA_WITH_COMPILER_WARNINGS=On \
                -DPIKA_WITH_COMPILER_WARNINGS_AS_ERRORS=On \
                -DPIKA_WITH_DEPRECATION_WARNINGS=On \
                -DPIKA_WITH_THREAD_LOCAL_STORAGE=On \
                -DPIKA_WITH_STACKTRACES_STATIC_SYMBOLS=On \
                -DPIKA_WITH_STACKTRACES_DEMANGLE_SYMBOLS=Off \
                -DPIKA_WITH_TESTS_DEBUG_LOG=On \
                -DPIKA_WITH_TESTS_DEBUG_LOG_DESTINATION=$HOME/project/build/debug-log.txt \
                -DPIKA_WITH_SPINLOCK_DEADLOCK_DETECTION=On
      - run:
          name: Building pika Arm64
          command: |
            cd build
            ninja -k 0 pika
      - run:
          name: Building tests Arm64
          command: |
            export CMAKE_PREFIX_PATH=$HOME/project/install/fmt:${CMAKE_PREFIX_PATH}
            cd build
            ninja -k 0 tests
      - run:
          name: Running tests Arm64
          when: always
          command: |
            cd build
            ulimit -c unlimited
            ctest \
              -j2 \
              --timeout 500 \
              -T test \
              -E 'tests.unit.modules.threading.condition_variable2' \
              --no-compress-output \
              --output-on-failure
      - run:
          <<: *convert_xml
          working_directory: /home/circleci/project/build
      - run:
          <<: *move_core_dump
          working_directory: /home/circleci/project/build
      - run:
          <<: *move_debug_log
          working_directory: /home/circleci/project/build
      - store_test_results:
          path: build/arm64_build
      - store_artifacts:
          path: build/arm64_build

workflows:
  version: 2
  build-and-test:
    jobs:
      - checkout_code
      - check_circular_deps:
          requires:
            - checkout_code
      - check_module_cmakelists:
          requires:
            - checkout_code
      - clang_format:
          requires:
            - checkout_code
      - cmake_format:
          requires:
            - checkout_code
      - python_format:
          requires:
            - checkout_code
      - shell_format:
          requires:
            - checkout_code
      - configure:
          requires:
            - checkout_code
      - configure_test_combinations:
          requires:
            - checkout_code
      - spellcheck:
          requires:
            - checkout_code
      - inshpect:
          requires:
            - checkout_code
      - core:
          requires:
            - configure
      - tests.examples:
          <<: *core_dependency
      - tests.unit:
          <<: *core_dependency
      - tests.regressions:
          <<: *core_dependency
      - tests.performance:
          <<: *core_dependency
      - tests.headers:
          <<: *core_dependency
      - install:
          requires:
            - core
            - tests.examples
            - tests.unit
            - tests.regressions
            - tests.performance
            - tests.headers

  build-and-test-arm64:
    jobs:
      - arm64_build
