# Copyright (c) 2024 ETH Zurich
# Copyright (c) 2020 EXASOL
#
# SPDX-License-Identifier: BSL-1.0
# Distributed under the Boost Software License, Version 1.0. (See accompanying
# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

name: Linux CI (asan/ubsan/lsan)

on:
  merge_group:
  pull_request:
  push:
    branches:
      # Development and release branches
      - main
      - release**

jobs:
  build:
    name: github/linux/sanitizers/address-undefined-leak
    runs-on: ubuntu-latest
    container:
      image: pikaorg/pika-ci-base:25
      # --privileged is enabled for sysctl further down.
      options: --privileged

    steps:
      - uses: actions/checkout@v4
      - name: Update apt repositories for ccache
        run: apt update
      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ccache-linux-sanitizers-address-undefined-leak
      - name: Switch OpenMPI to MPICH
        shell: bash
        run: |
            apt-get update
            apt-get remove --yes mpi-default-dev
            apt-get autoremove --yes
            apt-get install --no-install-recommends --yes libmpich-dev
      - name: Configure
        shell: bash
        run: |
            cmake \
                . \
                -Bbuild \
                -GNinja \
                -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
                -DCMAKE_BUILD_TYPE=Debug \
                -DPIKA_WITH_MALLOC=system \
                -DPIKA_WITH_MPI=ON \
                -DPIKA_WITH_EXAMPLES=ON \
                -DPIKA_WITH_TESTS=ON \
                -DPIKA_WITH_TESTS_EXAMPLES=ON \
                -DPIKA_WITH_TESTS_HEADERS=OFF \
                -DPIKA_WITH_TESTS_MAX_THREADS=$(nproc) \
                -DPIKA_WITH_COMPILER_WARNINGS=ON \
                -DPIKA_WITH_COMPILER_WARNINGS_AS_ERRORS=ON \
                -DPIKA_WITH_SANITIZERS=On \
                -DCMAKE_CXX_FLAGS="-fsanitize=address -fsanitize-address-use-after-scope -fsanitize=undefined -fno-omit-frame-pointer -Wno-error=ignored-optimization-argument" \
                -DPIKA_WITH_STACKOVERFLOW_DETECTION=Off \
                -DPIKA_WITH_CHECK_MODULE_DEPENDENCIES=On
      - name: Build
        if: always()
        shell: bash
        run: |
            cmake --build build --target examples
            cmake --build build --target tests
      - name: Test
        if: always()
        shell: bash
        run: |
            # Newer GitHub actions runners increased the number of bits used for address space
            # layout randomization to a higher number such that thread sanitizer breaks. Newer
            # versions of LLVM (17 and newer) should fix this again.
            # https://github.com/google/sanitizers/issues/1716
            # https://github.com/actions/runner-images/issues/9491
            sysctl --write vm.mmap_rnd_bits=28

            export ASAN_OPTIONS=fast_unwind_on_malloc=0:strict_string_checks=1:detect_leaks=1:detect_stack_use_after_return=0:check_initialization_order=1:strict_init_order=1:suppressions=$PWD/tools/asan.supp
            export UBSAN_OPTIONS=print_stacktrace=1:suppressions=$PWD/tools/ubsan.supp
            cd build
            ctest \
              --repeat-until-fail 7 \
              --timeout 120 \
              --output-on-failure \
              -E "$(${GITHUB_WORKSPACE}/.github/blacklist_to_ctest_regex.sh ${GITHUB_WORKSPACE}/.github/workflows/linux_asan_ubsan_lsan_blacklist.txt)"
      - name: Test blacklisted tests
        if: always()
        continue-on-error: true
        shell: bash
        run: |
            # See above.
            sysctl --write vm.mmap_rnd_bits=28

            export ASAN_OPTIONS=fast_unwind_on_malloc=0:strict_string_checks=1:detect_leaks=1:detect_stack_use_after_return=0:check_initialization_order=1:strict_init_order=1:suppressions=$PWD/tools/asan.supp
            export UBSAN_OPTIONS=print_stacktrace=1:suppressions=$PWD/tools/ubsan.supp
            cd build
            ctest \
              --repeat-until-fail 7 \
              --timeout 120 \
              --output-on-failure \
              -R "$(${GITHUB_WORKSPACE}/.github/blacklist_to_ctest_regex.sh ${GITHUB_WORKSPACE}/.github/workflows/linux_asan_ubsan_lsan_blacklist.txt)"
